# app.ini: 应用主配置文件，对应结构体为 library.types.Config

# 应用名称，代码里可通过 env.AppName() 方法读取到
AppName = "api-proxy-server"

# 运行模式，可配置值：
# debug    : 调试，    对应常量 env.RunModeDebug
# test     : 测试，    对应常量 env.RunModeTest
# release  : 线上发布， 对应常量 env.RunModeRelease
# 程序代码可以通过 env.RunMode() 获取该值
# 详见 http://gdp.baidu-int.com/api/baidu/gdp/env/
RunMode = "release"

# 服务开放端口
Port = 8001

# HTTPServer 的配置，对应结构体为 httpserver.Config
# Server 的端口信息配置在 hestia/conf/hestia.toml 中
[HTTPServer]
# 读 Header + Body 超时时间，ms，可选配置，若不配置，或者为0，将不超时
# 建议：内网 API 服务可以小一些；外网页面可大一些，避免弱网访问失败
# 若遇到读取 request.Body 失败，和此参数有关
# 请根据实际情况进行调整
ReadTimeout=60000 # 60s

# 写超时时间（从请求读取完开始计算），ms，可选配置
# 应该配置成服务的最大允许时间
# 若使用超时中间件，超时中间件对应的超时时间不应该大于该值
# 若要使用 /debug/pprof 功能，请设置一个大于 30s 的值
# 请根据实际情况进行调整
WriteTimeout=300000 # 5min

# 空闲等待超时时间，ms，可选配置，若为0，会使用 ReadTimeout
# 当设置 keep-alives 开启时(HTTP Server 默认开启)，同一个 tcp 连接，读取下一个请求的等待时间
# 若 client 出现 connection reset by peer，可能和此参数有关
# 请根据实际情况进行调整
IdleTimeout=0

[Logger]
# log保存文件夹名
LogDir        = "logs"
# 服务日志文件名
LogFileName   = ".log"
# gin日志文件名
GinWebLogName = "gin-access.log"
# 定时任务文件名
CronjobLogFileName = "cronjob.log"
# 异常恢复日志
RecoverLogFileName = "recover.log"

[HttpClient]
#每个Server的最大Idel
MaxIdleConnsPerHost=100
#http请求超时
Timeout=1000

[GrpcSetting]
# grpc 连接超时时间（ms）
Timeout              = 2000
# keepalive ping检查间隔（s）
# 最小值是10s，设置再小也会使用10s
KeepaliveTime        = 10
# keepalive ping后，等待timeout时间，
# 如果还没有活动，该链接关闭（s）
# 默认20s
KeepaliveTimeout     = 40
# 池中最大空闲连接数
MaxIdle              = 64
# 单位时间内，池中能分配的最大物理连接数
# 如果为零，表示没有限制
MaxActive            = 128
# 限制了每条物理连接的最大并发数
MaxConcurrentStreams = 32
Gcms                 = "gcms-grey-default.so-kf-portal-grey.svc.weiyun-int.com:8601"
Ums                  = "ums-grey-default.so-kf-portal-grey.svc.weiyun-int.com:8787"

[MysqlSetting]
MessageDB = "mysql.db"
MessageTablePrefix = "chat_message_"
MaxTableNum = 10

[EtceSetting]
PeerURLS = ["http://10.95.17.171:8990", "http://10.95.17.171:8991", "http://10.95.17.171:8992"]
